Linked list - nth node from the end 

Problem:
Write a Program to find the nth node of a list from the end. If there is no nth node print "There is no nth node in the list", otherwise print the nth node element.

Input Format
The input should be numbers (until user enters a negative value). Last line should be the value of nth node.

Constraints
1<=n<=10^7

Output Format
The output should be numbers in the list in separate line.
Sample Input 0
1
2
3
4
-1
2
Sample Output 0
3 is the nth node element in the list

Sample Input 1
1
2
3
4
-1
5
Sample Output 1
There is no nth node in the list




Program:
class node:
    def __init__(self,x):
        self.data=x
        self.next=None
        
class linkedlist:
    def __init__(self):
        self.head=self.tail=None
    def create(self,x):
        n=node(x)
        if self.head==None:
            self.head=self.tail=n
        else:
            self.tail.next=n
            self.tail=n
    
    def show(self,index):
        temp=self.head
        i=0
        if index<=c:
            index=c-index
            for i in range(index):
                temp=temp.next
            print(temp.data,"is the nth node element in the list")      
        else:
            print("There is no nth node in the list")
l1=linkedlist()
c=0
while True:
    x=int(input())
    if x==-1:
        index=int(input())
        break
    else:
        l1.create(x)
        c=c+1
l1.show(index)
        
        
