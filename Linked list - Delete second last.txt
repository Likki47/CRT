Linked list - Delete second last 1
Problem:
Write a Program to delete the second last element from the list. If deletion of second last element is not possible, print "Deletion of second last element is not possible", Otherwise print the list after deleting the second last element.

Input Format
Read elements upto -1

Constraints
1<=n<=10^7

Output Format
print output

Sample Input 0

1
2
3
4
-1
Sample Output 0
Before deleting:
1 2 3 4
After deleting:
1 2 4

Sample Input 1
23
34
55
12
66
45
33
-1
Sample Output 1
Before deleting:
23 34 55 12 66 45 33
After deleting:
23 34 55 12 66 33



Program:
class node:
    def __init__(self,x):
        self.data=x
        self.next=None
        
class linkedlist:
    def __init__(self):
        self.head=self.tail=None
    def create(self,x):
        n=node(x)
        if self.head==None:
            self.head=self.tail=n
        else:
            self.tail.next=n
            self.tail=n
    
    def deletelastsecond(self):
        li=[]
        temp=self.head
        while temp!=None :
            li.append(temp.data)
            temp=temp.next
        length=len(li)
        if length<1 :
            print("Deletion of second last element is not possible")
        else:
            print("Before deleting:")
            print(*li)
            li.pop(-2)
            print("After deleting:")
            print(*li)

l1=linkedlist()
while True:
    x=int(input())
    if x==-1:
        break
    else:
        l1.create(x)
l1.deletelastsecond()
        